name: Label and Assign by Code Contributor

on:
  pull_request:
    types: [opened, synchronize]

jobs:
  label-and-assign:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Label PR and assign to commit authors
        uses: actions/github-script@v6
        with:
          script: |
            const prNumber = context.payload.pull_request.number;
            const owner = context.repo.owner;
            const repo = context.repo.repo;

            const labelsToAdd = new Set();

            // ✅ 1. 커밋 메시지 기반 라벨링
            const { data: commits } = await github.rest.pulls.listCommits({
              owner,
              repo,
              pull_number: prNumber,
            });

            const commitMessages = commits.map(c => c.commit.message);
            const commitLabels = ["feat", "fix", "docs", "style", "refactor", "perf", "test", "build", "ci", "chore", "revert"];
            commitLabels.forEach(label => {
              const regex = new RegExp(`^${label}:\\s`, "i");
              if (commitMessages.some(m => regex.test(m))) {
                labelsToAdd.add(label);
              }
            });

            // ✅ 2. 폴더 기반 라벨링
            const { data: files } = await github.rest.pulls.listFiles({
              owner,
              repo,
              pull_number: prNumber,
            });

            let touchedFE = false;
            let touchedBE = false;
            for (const file of files) {
              const filename = file.filename;
              if (filename.startsWith("frontend/")) touchedFE = true;
              if (filename.startsWith("backend/")) touchedBE = true;
            }

            if (touchedFE) labelsToAdd.add("FE");
            if (touchedBE) labelsToAdd.add("BE");

            const finalLabels = Array.from(labelsToAdd);
            if (finalLabels.length > 0) {
              await github.rest.issues.addLabels({
                owner,
                repo,
                issue_number: prNumber,
                labels: finalLabels,
              });
            }

            // ✅ 3. 커밋 작성자 기준 assignee 자동 설정
            const contributors = new Set();
            for (const commit of commits) {
              if (commit.author && commit.author.login) {
                contributors.add(commit.author.login);
              }
            }

            // GitHub 협업자만 필터링 (권한 없는 외부 커밋 방지)
            const assignees = [];

            for (const login of contributors) {
              try {
                const { status } = await github.rest.repos.checkCollaborator({
                  owner,
                  repo,
                  username: login
                });
                if (status === 204) {
                  assignees.push(login);
                }
              } catch (e) {
                console.log(`❌ ${login} is not a collaborator`);
              }
            }

            console.log("👥 Assignees to add:", assignees);

            if (assignees.length > 0) {
              await github.rest.issues.addAssignees({
                owner,
                repo,
                issue_number: prNumber,
                assignees,
              });
            }
